.. py:module:: instruction

instruction -- Instruction module
=================================

This module exposes a number of tools for interacting with an
instruction defined within the database. There are three types
of tools within this module and each can be distinguished by their
prefixes which can be used to decode the operands for an instruction.
At the present time, only the Intel, AArch32 (ARM), and MIPS
architectures are supported.

Although IDA internally uses the :py:obj:`insn_t` and :py:obj:`op_t` to represent
an instruction and its operands, this module's base argument type
is typically an address or an operand index. When dealing with an
instruction's operands, the :py:obj:`ops_` prefix represents all of the
instructions operands and typically will take only an address.
Likewise when dealing with a single operand, the :py:obj:`op_` prefix
is used and will take an address and the operand index.

To request the actual IDA types (:py:obj:`insn_t` and :py:obj:`op_t`) there are
two tools that are provided. The :py:obj:`instruction.at(address)` tool
will take an address and return an :py:obj:`insn_t`. To get an :py:obj:`op_t`, a
user can use :py:obj:`instruction.operand(address, opnum)`. This will take
an address and an index and return the desired :py:obj:`op_t`.

Some globals are also defined for the given architecture which
can be used to query or access the registers that are currently
available. Once IDA has determined the architecture for the database
the :py:obj:`instruction.register` object is created. This object allows
one to reference a register that is defined for the architecture.

Another object that is created is the :py:obj:`instruction.architecture`
object. Searching for a register can be done by index and size
or simply by its name. This object also allows one to promote
or demote a register between its various sizes. This allows one
to navigate between the 8-bit, 16-bit, 32-bit, or 64-bit versions
of a register available in the architecture.

-------------
Function list
-------------

The functions that are available in this module use multicased
functions and aliases. For more information on this, please see
:ref:`multicase-aliases` and :ref:`multicase-functions`.

.. py:function:: at()
   
   Returns the :py:obj:`idaapi.insn_t` instance at the current address.
   
.. py:function:: at(ea)
   
   Returns the :py:obj:`idaapi.insn_t` instance at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: feature()
   
   Returns the feature bitmask of the instruction at the current address.
   
.. py:function:: feature(ea)
   
   Return the feature bitmask for the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_branch()
   
   Returns true if the current instruction is any kind of branch.
   
   Aliases: ``instruction.isBranch``, ``instruction.branchQ``
   
.. py:function:: is_branch(ea)
   
   Returns true if the instruction at :py:data:`ea` is any kind of branch.
   
   Aliases: ``instruction.isBranch``, ``instruction.branchQ``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_call()
   
   Returns true if the current instruction is a call.
   
   Aliases: ``instruction.callQ``, ``instruction.isCall``
   
.. py:function:: is_call(ea)
   
   Returns true if the instruction at :py:data:`ea` is a call.
   
   Aliases: ``instruction.callQ``, ``instruction.isCall``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_calli()
   
   Return true if the current instruction is an indirect call.
   
.. py:function:: is_calli(ea)
   
   Returns true if the instruction at :py:data:`ea` is an indirect call.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_jmp()
   
   Returns true if the current instruction is an immediate and indirect branch.
   
   Aliases: ``instruction.isJmp``, ``instruction.jmpQ``, ``instruction.JmpQ``
   
.. py:function:: is_jmp(ea)
   
   Returns true if the instruction at :py:data:`ea` is an immediate and indrect branch.
   
   Aliases: ``instruction.isJmp``, ``instruction.jmpQ``, ``instruction.JmpQ``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_jmpi()
   
   Returns true if the instruction at the current address is an indirect branch.
   
   Aliases: ``instruction.JmpiQ``, ``instruction.isJmpi``, ``instruction.jmpiQ``
   
.. py:function:: is_jmpi(ea)
   
   Returns true if the instruction at :py:data:`ea` is an indirect branch.
   
   Aliases: ``instruction.JmpiQ``, ``instruction.isJmpi``, ``instruction.jmpiQ``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_jxx()
   
   Returns true if the current instruction is a conditional branch.
   
   Aliases: ``instruction.jxxQ``, ``instruction.JxxQ``, ``instruction.isJxx``
   
.. py:function:: is_jxx(ea)
   
   Returns true if the instruction at :py:data:`ea` is a conditional branch.
   
   Aliases: ``instruction.jxxQ``, ``instruction.JxxQ``, ``instruction.isJxx``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_return()
   
   Returns true if the current instruction is a return-type instruction.
   
   Aliases: ``instruction.returnQ``, ``instruction.isReturn``, ``instruction.retQ``
   
.. py:function:: is_return(ea)
   
   Returns true if the instruction at :py:data:`ea` is a return-type instruction.
   
   Aliases: ``instruction.returnQ``, ``instruction.isReturn``, ``instruction.retQ``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: is_shift()
   
   Returns true if the current instruction is a bit-shifting instruction.
   
   Aliases: ``instruction.isShift``, ``instruction.shiftQ``
   
.. py:function:: is_shift(ea)
   
   Returns true if the instruction at :py:data:`ea` is a bit-shifting instruction.
   
   Aliases: ``instruction.isShift``, ``instruction.shiftQ``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: mnemonic()
   
   Returns the mnemonic of the instruction at the current address.
   
   Aliases: ``instruction.mnem``
   
.. py:function:: mnemonic(ea)
   
   Returns the mnemonic of the instruction at the address :py:data:`ea`.
   
   Aliases: ``instruction.mnem``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: op(opnum)
   
   Decodes the operand :py:data:`opnum` for the current instruction.
   
   Aliases: ``instruction.op_value``, ``instruction.op_decode``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op(ea, opnum)
   
   Decodes the operand :py:data:`opnum` for the instruction at the address :py:data:`ea`.
   
   Aliases: ``instruction.op_value``, ``instruction.op_decode``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_bits(opnum)
   
   Returns the size (in bits) for the operand :py:data:`opnum` belonging to the current instruction.
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_bits(ea, opnum)
   
   Returns the size (in bits) for the operand :py:data:`opnum` belonging to the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_enumeration(opnum)
   
   Return the enumeration id of operand :py:data:`opnum` for the current instruction.
   
   Aliases: ``instruction.op_enum``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_enumeration(ea, opnum)
   
   Return the enumeration id of operand :py:data:`opnum` for the instruction at :py:data:`ea`.
   
   Aliases: ``instruction.op_enum``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_enumeration(opnum, name)
   
   Apply the enumeration :py:data:`name` to operand :py:data:`opnum` for the current instruction.
   
   Aliases: ``instruction.op_enum``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   :param name: the name of the enumeration to apply
   :type name: str
   
.. py:function:: op_enumeration(ea, opnum, name)
   
   Apply the enumeration :py:data:`name` to operand :py:data:`opnum` for the instruction at :py:data:`ea`.
   
   Aliases: ``instruction.op_enum``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   :param name: the name of the enumeration to apply
   :type name: str
   
.. py:function:: op_enumeration(ea, opnum, id)
   
   Apply the enumeration :py:data:`id` to operand :py:data:`opnum` of the instruction at :py:data:`ea`.
   
   Aliases: ``instruction.op_enum``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   :param id: the identifer of an enumeration to apply
   :type id: int or long or tuple
   
.. py:function:: op_refs(opnum)
   
   Returns the :py:obj:`(address, opnum, type)` of all the instructions that reference the operand :py:data:`opnum` for the current instruction.
   
   Aliases: ``instruction.op_ref``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_refs(ea, opnum)
   
   Returns the :py:obj:`(address, opnum, type)` of all the instructions that reference the operand :py:data:`opnum` for the instruction at :py:data:`ea`.
   
   Aliases: ``instruction.op_ref``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_repr(opnum)
   
   Returns the representation for the operand :py:data:`opnum` belonging to the instruction at the current address.
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_repr(ea, opnum)
   
   Returns the representation for the operand :py:data:`opnum` belonging to the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_segment(opnum)
   
   Returns the segment register used by the operand :py:data:`opnum` for the instruction at the current address.
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_segment(ea, opnum)
   
   Returns the segment register used by the operand :py:data:`opnum` for the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_size(opnum)
   
   Returns the size for the operand :py:data:`opnum` belonging to the current instruction.
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_size(ea, opnum)
   
   Returns the size for the operand :py:data:`opnum` belonging to the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_state(opnum)
   
   Returns the modification state for the operand :py:data:`opnum` belonging to the current instruction.
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_state(ea, opnum)
   
   Returns the modification state for the operand :py:data:`opnum` belonging to the instruction at the address :py:data:`ea`.
   
   The returned state is a string that can be "r", "w", or "rw" depending on
   whether the operand is being read from, written to, or modified (both).
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_string(opnum)
   
   Return the string type of operand :py:obj:`opnum` for the current instruction.
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_string(ea, opnum)
   
   Return the string type (:py:obj:`idaapi.STRTYPE_`) of operand :py:data:`opnum` for the instruction at :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_string(ea, opnum, strtype)
   
   Set the string type used by operand :py:data:`opnum` for the instruction at :py:data:`ea` to :py:data:`strtype`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   :param strtype: an IDA string type to apply to the operand
   :type strtype: int or long
   
.. py:function:: op_structure(opnum)
   
   Return the structure that operand :py:data:`opnum` at the current instruction actually references.
   
   Aliases: ``instruction.op_struct``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: op_structure(ea, opnum)
   
   Return the structure that operand :py:data:`opnum` for instruction :py:data:`ea` actually references.
   
   Aliases: ``instruction.op_struct``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: op_structure(opnum, structure, \*\*delta)
   
   Apply the specified :py:data:`structure` to the instruction operand :py:data:`opnum` at the current address.
   
   Aliases: ``instruction.op_struct``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   :param structure: the :py:obj:`structure_t` to apply
   :type structure: structure_t or member_t
   :param \*\*delta: if :py:data:`delta` is specified as an integer, then offset the structure by it
   
.. py:function:: op_structure(opnum, id, \*\*delta)
   
   Apply the structure identified by :py:data:`id` to the instruction operand :py:data:`opnum` at the current address.
   
   Aliases: ``instruction.op_struct``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   :param id: the id of a structure
   :type id: int or long
   :param \*\*delta: if :py:data:`delta` is specified as an integer, then offset the structure by it
   
.. py:function:: op_structure(opnum, path, \*\*delta)
   
   Apply the structure members in :py:data:`path` to the instruction operand :py:data:`opnum` at the current address.
   
   Aliases: ``instruction.op_struct``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   :param path: an iterable containing structures, members, or integers that is used to calculate the offset into the structure to apply to the operand
   :type path: tuple or list
   :param \*\*delta: if :py:data:`delta` is specified as an integer, then offset the structure by it
   
.. py:function:: op_structure(ea, opnum, structure, \*\*delta)
   
   Apply the specified :py:data:`structure` to the instruction operand :py:data:`opnum` at the address :py:data:`ea`.
   
   Aliases: ``instruction.op_struct``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   :param structure: the :py:obj:`structure_t` to apply
   :type structure: structure_t or member_t
   :param \*\*delta: if :py:data:`delta` is specified as an integer, then offset the structure by it
   
.. py:function:: op_structure(ea, opnum, id, \*\*delta)
   
   Apply the structure identified by :py:data:`id` to the instruction operand :py:data:`opnum` at the address :py:data:`ea`.
   
   If the offset :py:data:`delta` is specified, shift the structure by that amount.
   
   Aliases: ``instruction.op_struct``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   :param id: the id of a structure
   :type id: int or long
   :param \*\*delta: if :py:data:`delta` is specified as an integer, then offset the structure by it
   
.. py:function:: op_structure(ea, opnum, path, \*\*delta)
   
   Apply the structure members in :py:data:`path` to the instruction operand :py:data:`opnum` at the address :py:data:`ea`.
   
   If the offset :py:data:`delta` is specified, shift the structure by that amount.
   
   Aliases: ``instruction.op_struct``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   :param path: an iterable containing structures, members, or integers that is used to calculate the offset into the structure to apply to the operand
   :type path: tuple or list
   :param \*\*delta: if :py:data:`delta` is specified as an integer, then offset the structure by it
   
.. py:function:: operand(opnum)
   
   Returns the :py:obj:`idaapi.op_t` for the operand :py:data:`opnum` belonging to the instruction at the current address.
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: operand(ea, opnum)
   
   Returns the :py:obj:`idaapi.op_t` for the operand :py:data:`opnum` belonging to the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: operands()
   
   Returns all of the :py:obj:`idaapi.op_t` instances for the instruction at the current address.
   
.. py:function:: operands(ea)
   
   Returns all of the :py:obj:`idaapi.op_t` instances for the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_constant()
   
   Return the indices of any operands in the current instruction that are constants.
   
   Aliases: ``instruction.ops_const``
   
.. py:function:: ops_constant(ea)
   
   Return the indices of any operands in the instruction at :py:data:`ea` that are constants.
   
   Aliases: ``instruction.ops_const``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_count()
   
   Returns the number of operands of the instruction at the current address.
   
.. py:function:: ops_count(ea)
   
   Returns the number of operands of the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_read()
   
   Returns the indices of any operands that are being read from by the instruction at the current address.
   
.. py:function:: ops_read(ea)
   
   Returns the indices of any operands that are being read from by the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_register(reg, \*regs, \*\*modifiers)
   
   Yields the index of each operand in the instruction at the current address that uses :py:data:`reg` or any one of the registers in :py:data:`regs`.
   
   If the keyword :py:data:`write` is true, then only return the result if it's writing to the register.
   
   Aliases: ``instruction.ops_regs``, ``instruction.ops_reg``
   
   :param reg: the register to search the operands for
   :type reg: str or register_t
   :param \*regs: any other registers to include
   :param \*\*modifiers: if :py:data:`write` is specified, then only return operands that write to the specified registers. if :py:data:`read` is specified then do the same but for operands that read from them.
   
.. py:function:: ops_register(ea, reg, \*regs, \*\*modifiers)
   
   Yields the index of each operand in the instruction at address :py:data:`ea` that uses :py:data:`reg` or any one of the registers in :py:data:`regs`.
   
   If the keyword :py:data:`write` is true, then only return the result if it's writing to the register.
   
   Aliases: ``instruction.ops_regs``, ``instruction.ops_reg``
   
   :param ea: the address of an instruction
   :param reg: the register to search the operands for
   :type reg: str or register_t
   :param \*regs: any other registers to include
   :param \*\*modifiers: if :py:data:`write` is specified, then only return operands that write to the specified registers. if :py:data:`read` is specified then do the same but for operands that read from them.
   
.. py:function:: ops_repr()
   
   Returns a tuple of the :py:obj:`op_repr` of all the operands for the instruction at the current address.
   
.. py:function:: ops_repr(ea)
   
   Returns a tuple of the :py:obj:`op_repr` of all the operands for the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_size()
   
   Returns a tuple with all the sizes of each operand for the instruction at the current address.
   
.. py:function:: ops_size(ea)
   
   Returns a tuple with all the sizes of each operand for the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_state()
   
   Returns a tuple for all the operands containing one of the states "r", "w", or "rw"
   
.. py:function:: ops_state(ea)
   
   Returns a tuple of for all the operands containing one of the states "r", "w", or "rw" describing how the operands are modified for the instruction at address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_type()
   
   Returns a tuple of the types for all the operands in the instruction at the current address.
   
   Aliases: ``instruction.opts``
   
.. py:function:: ops_type(ea)
   
   Returns a tuple of the types for all the operands in the instruction at the address :py:data:`ea`.
   
   Aliases: ``instruction.opts``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_value()
   
   Returns a tuple of all the operands for the instruction at the current address.
   
   Aliases: ``instruction.ops``
   
.. py:function:: ops_value(ea)
   
   Returns a tuple of all the operands for the instruction at the address :py:data:`ea`.
   
   Aliases: ``instruction.ops``
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: ops_write()
   
   Returns the indices of the operands that are being written to by the instruction at the current address.
   
.. py:function:: ops_write(ea)
   
   Returns the indices of the operands that are being written to by the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
.. py:function:: opt(opnum)
   
   Returns the type of the operand :py:data:`opnum` belonging to the current instruction.
   
   Aliases: ``instruction.op_type``
   
   :param opnum: the operand number of the current instruction
   :type opnum: int or long
   
.. py:function:: opt(ea, opnum)
   
   Returns the type of the operand :py:data:`opnum` belonging to the instruction at the address :py:data:`ea`.
   
   The types returned are dependant on the architecture.
   
   Aliases: ``instruction.op_type``
   
   :param ea: the address of an instruction
   :type ea: int or long
   :param opnum: the operand number of the instruction
   :type opnum: int or long
   
.. py:function:: size()
   
   Returns the length of the instruction at the current address.
   
.. py:function:: size(ea)
   
   Returns the length of the instruction at the address :py:data:`ea`.
   
   :param ea: the address of an instruction
   :type ea: int or long
   
--------------
Namespace list
--------------

These are the namespaces available within this module. Namespaces
group similar functions that can be used typically for the same
concept. Please see :ref:`multicase-namespaces` for more
information on namespaces. For more information on multicase
functions or aliases, please see :ref:`multicase-functions` or
:ref:`multicase-aliases`.

******************
instruction.armops
******************

This internal namespace contains the different operand types that
can be returned for the ARM architecture.

^^^^^^^^^^^
armops.disp
^^^^^^^^^^^

.. py:class:: armops.disp
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple representing a memory displacement on the ARM architecture.
   
   Has the format :py:obj:`(Rn, Offset)` where :py:obj:`Rn` is a register and :py:obj:`Offset` is
   the integer that is added to the register.
   
   .. py:attribute:: symbols
   
      :param getter: Yield the :py:obj:`Rn` register from the tuple.
   
^^^^^^^^^^^
armops.flex
^^^^^^^^^^^

.. py:class:: armops.flex
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple representing a flexible operand as available on the ARM architecture.
   
   Has the format :py:obj:`(Rn, shift, n)` which allows the architecture to apply
   a binary shift or rotation to the value of a register :py:obj:`Rn`.
   
   .. py:attribute:: symbols
   
      :param getter: Yield the :py:obj:`Rn` register from the tuple.
   
^^^^^^^^^^^
armops.list
^^^^^^^^^^^

.. py:class:: armops.list
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple representing a register list on the ARM architecture.
   
   Has the simple format :py:obj:`(reglist,)` where :py:obj:`reglist` is a set of registers
   that can be explicitly tested for membership.
   
   .. py:attribute:: symbols
   
      :param getter: Yield any of the registers within the :py:obj:`reglist` field belonging to the tuple.
   
^^^^^^^^^^
armops.mem
^^^^^^^^^^

.. py:class:: armops.mem
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple for representing a memory operand on the ARM architecture.
   
   Has the format :py:obj:`(address, value)` where :py:obj:`address` is the actual value
   stored in the operand and :py:obj:`value` is the value that is dereferenced.
   
   .. py:attribute:: symbols
   
      :param getter: This operand type is not composed of any symbols.
   
^^^^^^^^^^^^^
armops.phrase
^^^^^^^^^^^^^

.. py:class:: armops.phrase
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple for representing a memory phrase on the ARM architecture
   
   Has the format :py:obj:`(Rn, Rm)` where both are registers that compose the
   phrase.
   
   .. py:attribute:: symbols
   
      :param getter: Yield the :py:obj:`Rn` and :py:obj:`Rm` registers from the tuple.
   
********************
instruction.intelops
********************

This internal namespace contains the different operand types that
can be returned for the Intel architecture.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
intelops.OffsetBaseIndexScale
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: intelops.OffsetBaseIndexScale
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple representing a memory phrase for the Intel architecture.
   
   Has the format :py:obj:`(offset, base, index, scale)` where both :py:obj:`base` and
   :py:obj:`index` are both optional registers.
   
   .. py:attribute:: symbols
   
      :param getter: Yield the :py:obj:`base`, and the :py:obj:`index` registers from the tuple if they are defined.
   
^^^^^^^^^^^^^^^^^^^^^^
intelops.SegmentOffset
^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: intelops.SegmentOffset
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple representing an address with a segment register attached for Intel.
   
   Has the format :py:obj:`(segment, offset)` where :py:obj:`segment` is a segment register.
   
   .. py:attribute:: symbols
   
      :param getter: Yield the :py:obj:`segment` register from the tuple if it is defined.
   
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
intelops.SegmentOffsetBaseIndexScale
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. py:class:: intelops.SegmentOffsetBaseIndexScale
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple representing a memory phrase for the Intel architecture.
   
   Has the format :py:obj:`(segment, offset, base, index, scale)` where :py:obj:`segment`
   includes the segment register and :py:obj:`base` and :py:obj:`index` are both optional registers.
   
   .. py:attribute:: symbols
   
      :param getter: Yield the :py:obj:`segment`, :py:obj:`base`, and the :py:obj:`index` registers from the tuple if they are defined.
   
*******************
instruction.mipsops
*******************

This internal namespace contains the different operand types that
can be returned for the MIPS architecture.

^^^^^^^^^^^^^^
mipsops.phrase
^^^^^^^^^^^^^^

.. py:class:: mipsops.phrase
   
   Bases: :py:class:`namedtuple`, :py:class:`symbol_t`
   
   A tuple for representing a memory phrase on the MIPS architecture.
   
   Has the format :py:obj:`(Rn, Offset)` where :py:obj:`Rn` is the register and :py:obj:`Offset`
   is the immediate that is added to the register.
   
   .. py:attribute:: symbols
   
      :param getter: Yield the :py:obj:`Rn` register from this tuple.
   
----------
Class list
----------


Classes provide the definition necessary to instantiate an object.
In most cases, a class is returned when calling one of the prior
listed functions and thus have no need to be manually instantiated.
Classes may also have aliases defined for them. Please refer to the
documentation for the class to see what is available. For more
information on aliases, please see :ref:`multicase-aliases`.


*******
AArch32
*******

.. py:class:: AArch32
   
   Bases: :py:class:`architecture_t`
   
   An implementation of all the registers available on the AArch32 (ARM) architecture.
   
   This is used to locate or manage the different registers that are available.
   
   An instance of this class can be accessed as :py:obj:`instruction.architecture`
   (or :py:obj:`instruction.arch`) when the current architecture of the database is ARM.
   
*****
Intel
*****

.. py:class:: Intel
   
   Bases: :py:class:`architecture_t`
   
   An implementation of all the registers available on the Intel architecture.
   
   This keeps track of the relationships between registers to allow one to
   promote or demote a register to the different sizes that are available.
   
   An instance of this class can be accessed as :py:obj:`instruction.architecture`
   (or :py:obj:`instruction.arch`) when the current architecture of the database is Intel.
   
****
Mips
****

.. py:class:: Mips
   
   Bases: :py:class:`architecture_t`
   
   An implementation of all the registers available on the MIPS architecture.
   
   This includes the different co-processor registers that are also available
   but are treated as special instructions by IDA.
   
   An instance of this class can be accessed as :py:obj:`instruction.architecture`
   (or :py:obj:`instruction.arch`) when the current architecture of the database is MIPS.
   
