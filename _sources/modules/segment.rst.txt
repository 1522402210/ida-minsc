.. py:module:: segment

segment -- Segment module
=========================

This module provides a number of tools that can be used to enumerate
or work with segments within a database.

The base argument type for some of the utilities within this module
is the :py:obj:`segment_t`. This type is interchangeable with the address
or the segment name and so either can be used to identify a segment.

When listing or enumerating segments there are different types that
one can use in order to filter or match them. These types are as
follows:

- :py:obj:`name` - Match according to the exact segment name
- :py:obj:`like` - Filter the segment names according to a glob
- :py:obj:`regex` - Filter the function names according to a regular-expression
- :py:obj:`index` - Match the segment by its index
- :py:obj:`identifier` - Match the segment by its identifier
- :py:obj:`selector` - Match the segment by its selector
- :py:obj:`greater` or :py:obj:`gt` - Filter the segments for any after the specified address
- :py:obj:`less` or :py:obj:`lt` - Filter the segments for any before the specified address
- :py:obj:`predicate` - Filter the segments by passing their :py:obj:`idaapi.segment_t` to a callable

Some examples of using these keywords are as follows::

    > for l, r in database.segments(): ...
    > database.segments.list(regex=r'\\.r?data')
    > iterable = database.segments.iterate(like='*text*')
    > result = database.segments.search(greater=0x401000)

-------------
Function list
-------------

The functions that are available in this module use multicased
functions and aliases. For more information on this, please see
:ref:`multicase-aliases` and :ref:`multicase-functions`.

.. py:function:: bottom()
   
   Return the bottom address of the current segment.
   
.. py:function:: bottom(segment)
   
   Return the bottom address of the segment identified by :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: bounds()
   
   Return the bounds of the current segment.
   
   Aliases: ``segment.range``
   
.. py:function:: bounds(segment)
   
   Return the bounds of the segment specified by :py:data:`segment`.
   
   Aliases: ``segment.range``
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: by(segment)
   
   Return a segment by its :py:obj:`idaapi.segment_t`.
   
   :param segment: an :py:obj:`idaapi.segment_t` to return
   :type segment: idaapi.segment_t
   
.. py:function:: by(name)
   
   Return the segment by its :py:data:`name`.
   
   :param name: the name of the segment to return
   :type name: str
   
.. py:function:: by(ea)
   
   Return the segment containing the address :py:data:`ea`.
   
   :param ea: an address belonging to the segment to return
   :type ea: int or long
   
.. py:function:: by()
   
   Return the current segment.
   
.. py:function:: by(\*\*type)
   
   Return the segment matching the specified keywords in :py:data:`type`.
   
   :param \*\*type: any keyword that can be used to match the segment with
   
.. py:function:: by_address(ea)
   
   Return the segment that contains the specified :py:data:`ea`.
   
   Aliases: ``segment.byAddress``
   
   :param ea: an address belonging to the segment to return
   
.. py:function:: by_name(name)
   
   Return the segment with the given :py:data:`name`.
   
   Aliases: ``segment.byName``
   
   :param name: the name of the segment to return
   
.. py:function:: by_selector(selector)
   
   Return the segment associated with :py:data:`selector`.
   
   Aliases: ``segment.bySelector``
   
   :param selector: the selector belonging to the segment to return
   
.. py:function:: color()
   
   Return the color of the current segment.
   
.. py:function:: color(segment)
   
   Return the color of the segment identified by :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: color(none)
   
   Clear the color of the current segment.
   
   :param none: the value :py:obj:`None`
   :type none: None
   
.. py:function:: color(segment, none)
   
   Clear the color of the segment identified by :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   :param none: the value :py:obj:`None`
   :type none: None
   
.. py:function:: color(segment, rgb)
   
   Sets the color of the segment identified by :py:data:`segment` to :py:data:`rgb`.
   
   :param segment: an identifier used to describe a segment
   :param rgb: the color as a red, green, and blue integer (:py:obj:`0x00RRGGBB`)
   :type rgb: int or long
   
.. py:function:: contains(ea)
   
   Returns true if the address :py:data:`ea` is contained within the current segment.
   
   :param ea: an address in the database
   :type ea: int or long
   
.. py:function:: contains(address, ea)
   
   Returns true if the address :py:data:`ea` is contained within the segment belonging to the specified :py:data:`address`.
   
   :param address: an address belonging to a segment
   :param ea: an address in the database
   :type ea: int or long
   
.. py:function:: contains(name, ea)
   
   Returns true if the address :py:data:`ea` is contained within the segment with the specified :py:data:`name`.
   
   :param name: the name of a segment
   :type name: str
   :param ea: an address in the database
   :type ea: int or long
   
.. py:function:: contains(segment, ea)
   
   Returns true if the address :py:data:`ea` is contained within the :py:obj:`idaapi.segment_t` specified by :py:data:`segment`.
   
   :param segment: an :py:obj:`idaapi.segment_t` to check
   :type segment: idaapi.segment_t
   :param ea: an address in the database
   :type ea: int or long
   
.. py:function:: go_offset(offset)
   
   Go to the :py:data:`offset` of the current segment.
   
   Aliases: ``segment.goof``, ``segment. gooffset``, ``segment.gotooffset``
   
   :param offset: an offset into the current segment
   :type offset: int or long
   
.. py:function:: go_offset(segment, offset)
   
   Go to the :py:data:`offset` of the specified :py:data:`segment`.
   
   Aliases: ``segment.goof``, ``segment. gooffset``, ``segment.gotooffset``
   
   :param segment: an identifier used to describe a segment
   :param offset: an offset into the segment
   :type offset: int or long
   
.. py:function:: iterate()
   
   Iterate through all of the addresses within the current segment.
   
.. py:function:: iterate(segment)
   
   Iterate through all of the addresses within the specified :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: iterate(segment)
   
   Iterate through all of the addresses within the :py:obj:`idaapi.segment_t` represented by :py:data:`segment`.
   
   :param segment: an :py:obj:`idaapi.segment_t` to iterate through
   :type segment: idaapi.segment_t
   
.. py:function:: list(string)
   
   List all of the segments whose name matches the glob specified by :py:data:`string`.
   
   :param string: the glob to filter the segment names with
   :type string: str
   
.. py:function:: list(\*\*type)
   
   List all of the segments in the database that match the keyword specified by :py:data:`type`.
   
   :param \*\*type: any keyword that can be used to filter the segments with
   
.. py:function:: load(filename, ea, size=None, offset=0, \*\*kwds)
   
   Load the specified :py:data:`filename` to the address :py:data:`ea` as a segment.
   
   If :py:data:`size` is not specified, use the length of the file.
   The keyword :py:data:`offset` represents the offset into the file to use.
   The keyword :py:data:`name` can be used to name the segment.
   
   :param filename: a filename to read from
   :param ea: the address to map to
   :param size: the number of bytes to map
   :param offset: the offset into the file to read from
   :param \*\*kwds: if :py:data:`name` is specified as a string, then use it as the name for the new segment
   
.. py:function:: map(ea, size, newea, \*\*kwds)
   
   Map :py:data:`size` bytes of data from :py:data:`ea` into a new segment at :py:data:`newea`.
   
   The keyword :py:data:`name` can be used to name the segment.
   
   :param ea: the address of the data to map
   :param size: the number of bytes to map
   :param newea: the target address to map the data to
   :param \*\*kwds: if :py:data:`name` is specified as a string, then use it as the name for the new segment
   
.. py:function:: name()
   
   Return the name of the current segment.
   
.. py:function:: name(segment)
   
   Return the name of the segment identified by :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: new(offset, size, name, \*\*kwds)
   
   Create a segment at :py:data:`offset` with :py:data:`size` and name it according to :py:data:`name`.
   
   The keyword :py:data:`bits` can be used to specify the bit size of the segment
   The keyword :py:data:`comb` can be used to specify any flags (idaapi.sc\*)
   The keyword :py:data:`align` can be used to specify paragraph alignment (idaapi.sa\*)
   The keyword :py:data:`org` specifies the origin of the segment (must be paragraph aligned due to ida)
   
   Aliases: ``segment.create``
   
   :param offset: the offset to create the segment at
   :param size: the size of the segment
   :param name: the name of the segment
   :param \*\*kwds: If :py:obj:`bits` is specified, then specify the bit size of the segment. :py:obj:`align` can be used to specify the paragraph alignment. :py:obj:`org` can be used to set the origin and :py:obj:`comb` can be used to specify any other flags
   
.. py:function:: offset()
   
   Return the offset of the current address from the beginning of the current segment.
   
.. py:function:: offset(ea)
   
   Return the offset of the address :py:data:`ea` from the beginning of the current segment.
   
   :param ea: an address within the current segment
   :type ea: int or long
   
.. py:function:: offset(segment, ea)
   
   Return the offset of the address :py:data:`ea` from the beginning of :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   :param ea: an address within the segment
   :type ea: int or long
   
.. py:function:: read()
   
   Return the contents of the current segment.
   
   Aliases: ``segment.string``
   
.. py:function:: read(segment)
   
   Return the contents of the segment identified by :py:data:`segment`.
   
   Aliases: ``segment.string``
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: remove(segment, remove=False)
   
   Remove the segment identified by :py:data:`segment`.
   
   If the bool :py:data:`remove` is specified, then remove the content of the segment from the database.
   
   Aliases: ``segment.delete``
   
   :param segment: an identifier used to describe a segment
   :param remove: whether to remove the contents of the segment from the database
   
.. py:function:: repr()
   
   Return the current segment in a printable form.
   
.. py:function:: repr(segment)
   
   Return the specified :py:data:`segment` in a printable form.
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: save(filename, segment, offset=0)
   
   Export the segment identified by :py:data:`segment` to the file named :py:data:`filename`.
   
   If the int :py:data:`offset` is specified, then begin writing into the file at the specified offset.
   
   Aliases: ``segment.export``
   
   :param filename: the path to the filename to write the segment to
   :param segment: an identifier used to specify a segment
   :param offset: the offset into the file to start writing the segment
   
.. py:function:: search(name)
   
   Search through all the segments and return the first one matching the glob :py:data:`name`.
   
   :param name: the glob to match the segment name with
   :type name: str
   
.. py:function:: search(\*\*type)
   
   Search through all the segments and return the first one that matches the keyword specified by :py:data:`type`.
   
   :param \*\*type: any keyword that can be used to filter segments with
   
.. py:function:: size()
   
   Return the size of the current segment.
   
.. py:function:: size(segment)
   
   Return the size of the segment specified by :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: top()
   
   Return the top address of the current segment.
   
.. py:function:: top(segment)
   
   Return the top address of the segment identified by :py:data:`segment`.
   
   :param segment: an identifier used to describe a segment
   
.. py:function:: within()
   
   Returns true if the current address is within any segment.
   
.. py:function:: within(ea)
   
   Returns true if the address :py:data:`ea` is within any segment.
   
   :param ea: an address in the database
   :type ea: int or long
   
